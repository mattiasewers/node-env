"use strict";
/*
 * Copyright 2018 The NATS Authors
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
var nuid = require("nuid");
/**
 * Create a properly formatted inbox subject.
 */
function createInbox() {
    return ("_INBOX." + nuid.next());
}
exports.createInbox = createInbox;
/**
 * @hidden
 */
function extend(a) {
    var b = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        b[_i - 1] = arguments[_i];
    }
    var _loop_1 = function (i) {
        var o = b[i];
        Object.keys(o).forEach(function (k) {
            a[k] = o[k];
        });
    };
    for (var i = 0; i < b.length; i++) {
        _loop_1(i);
    }
    return a;
}
exports.extend = extend;
/**
 * @hidden
 */
function shuffle(a) {
    var _a;
    for (var i = a.length - 1; i > 0; i--) {
        var j = Math.floor(Math.random() * (i + 1));
        _a = [a[j], a[i]], a[i] = _a[0], a[j] = _a[1];
    }
    return a;
}
exports.shuffle = shuffle;
function settle(a) {
    if (Array.isArray(a)) {
        return Promise.resolve(a).then(_settle);
    }
    else {
        return Promise.reject(new TypeError("argument requires an array of promises"));
    }
}
exports.settle = settle;
function _settle(a) {
    return Promise.all(a.map(function (p) {
        return Promise.resolve(p).then(_resolve, _resolve);
    }));
}
function _resolve(r) {
    return (r);
}
//# sourceMappingURL=util.js.map