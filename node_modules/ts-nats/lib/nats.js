"use strict";
/*
 * Copyright 2013-2018 The NATS Authors
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var events = require("events");
var error_1 = require("./error");
var util_1 = require("./util");
var protocolhandler_1 = require("./protocolhandler");
var const_1 = require("./const");
var nuid_1 = require("nuid");
/** Version of the ts-nats library */
exports.VERSION = "1.1.2";
/**
 * @hidden
 */
function defaultSub() {
    return { sid: 0, subject: "", received: 0 };
}
exports.defaultSub = defaultSub;
/**
 * Payload specifies the type of [[Msg.data]] that will be sent and received by the client.
 * The payload affects all client subscribers and publishers. If using mixed types, either
 * create multiple connections, or select [[Payload.BINARY]] and perform your own decoding.
 */
var Payload;
(function (Payload) {
    /** Specifies a string payload. This is default [[NatsConnectionOptions.payload]] setting */
    Payload["STRING"] = "string";
    /** Specifies payloads are JSON. */
    Payload["JSON"] = "json";
    /** Specifies payloads are binary (Buffer) */
    Payload["BINARY"] = "binary";
})(Payload = exports.Payload || (exports.Payload = {}));
/** @hidden */
function defaultReq() {
    return { token: "", subject: "", received: 0, max: 1 };
}
/**
 * NATS server Client object.
 */
var Client = /** @class */ (function (_super) {
    __extends(Client, _super);
    /** @hidden */
    function Client() {
        var _this = _super.call(this) || this;
        /** Returns an unique and properly formatted inbox subject that can be used for replies */
        _this.createInbox = util_1.createInbox;
        events.EventEmitter.call(_this);
        return _this;
        // this.addDebugHandlers()
    }
    // private addDebugHandlers() {
    //     let events = [
    //         'close',
    //         'connect',
    //         'connecting',
    //         'disconnect',
    //         'error',
    //         'permissionError',
    //         'pingcount',
    //         'pingtimer',
    //         'reconnect',
    //         'reconnecting',
    //         'serversChanged',
    //         'subscribe',
    //         'unsubscribe',
    //         'yield',
    //     ];
    //
    //     function handler(name: string) {
    //         return function(arg: any) {
    //             console.log('debughdlr', name, [arg]);
    //         }
    //     }
    //
    //     events.forEach((e) => {
    //         this.on(e, handler(e));
    //     });
    // }
    /** @hidden */
    Client.connect = function (opts) {
        return new Promise(function (resolve, reject) {
            var options = Client.parseOptions(opts);
            var client = new Client();
            protocolhandler_1.ProtocolHandler.connect(client, options)
                .then(function (ph) {
                client.protocolHandler = ph;
                resolve(client);
            }).catch(function (ex) {
                reject(ex);
            });
        });
    };
    /**
     * @hidden
     */
    Client.defaultOptions = function () {
        return {
            encoding: "utf8",
            maxPingOut: const_1.DEFAULT_MAX_PING_OUT,
            maxReconnectAttempts: const_1.DEFAULT_MAX_RECONNECT_ATTEMPTS,
            noRandomize: false,
            pedantic: false,
            pingInterval: const_1.DEFAULT_PING_INTERVAL,
            reconnect: true,
            reconnectTimeWait: const_1.DEFAULT_RECONNECT_TIME_WAIT,
            tls: undefined,
            verbose: false,
            waitOnFirstConnect: false,
        };
    };
    /**
     * @hidden
     */
    Client.parseOptions = function (args) {
        if (args === undefined || args === null) {
            args = { url: const_1.DEFAULT_URI };
        }
        if (typeof args === 'number') {
            args = { url: const_1.DEFAULT_PRE + args };
        }
        else if (typeof args === 'string') {
            args = { url: args.toString() };
        }
        else if (typeof args === 'object') {
            if (args.port !== undefined) {
                args.url = const_1.DEFAULT_PRE + args.port;
            }
        }
        // override defaults with provided options.
        // non-standard aliases are not handled
        // FIXME: may need to add uri and pass
        // uri, password, urls, NoRandomize, dontRandomize, secure, client
        var options = util_1.extend(Client.defaultOptions(), args);
        // Authentication - make sure authentication is valid.
        if (options.user && options.token) {
            throw error_1.NatsError.errorForCode(error_1.ErrorCode.BAD_AUTHENTICATION);
        }
        // if specified nonceSigner must be a function
        if (options.nonceSigner && typeof options.nonceSigner !== 'function') {
            throw error_1.NatsError.errorForCode(error_1.ErrorCode.NONCE_SIGNER_NOTFUNC);
        }
        // Encoding - make sure its valid.
        var bufEncoding = options.encoding;
        if (!Buffer.isEncoding(bufEncoding)) {
            throw new error_1.NatsError(error_1.INVALID_ENCODING_MSG_PREFIX + options.encoding, error_1.ErrorCode.INVALID_ENCODING);
        }
        return options;
    };
    /**
     * Flush outbound queue to server and call optional callback when server has processed all data.
     * @param cb is optional, if not provided a Promise is returned. Flush is completed when promise resolves.
     * @return Promise<void> or void if a callback was provided.
     */
    Client.prototype.flush = function (cb) {
        var _this = this;
        if (cb === undefined) {
            return new Promise(function (resolve, reject) {
                _this.protocolHandler.flush(function (err) {
                    if (!err) {
                        resolve();
                    }
                    else {
                        reject(err);
                    }
                });
            });
        }
        else {
            this.protocolHandler.flush(cb);
        }
    };
    /**
     * Publish a message to the given subject, with optional payload and reply subject.
     * @param subject
     * @param data optional (can be a string, JSON object, or Buffer. Must match [[NatsConnectionOptions.payload].)
     * @param reply optional
     */
    Client.prototype.publish = function (subject, data, reply) {
        if (data === void 0) { data = undefined; }
        if (reply === void 0) { reply = ""; }
        if (!subject) {
            throw error_1.NatsError.errorForCode(error_1.ErrorCode.BAD_SUBJECT);
        }
        this.protocolHandler.publish(subject, data, reply);
    };
    /**
     * Subscribe to a given subject. Messages are passed to the provided callback.
     * @param subject
     * @param cb
     * @param opts   Optional subscription options
     * @return Promise<Subscription>
     */
    Client.prototype.subscribe = function (subject, cb, opts) {
        var _this = this;
        if (opts === void 0) { opts = {}; }
        return new Promise(function (resolve, reject) {
            if (!subject) {
                reject(error_1.NatsError.errorForCode(error_1.ErrorCode.BAD_SUBJECT));
            }
            if (!cb) {
                reject(new error_1.NatsError("subscribe requires a callback", error_1.ErrorCode.API_ERROR));
            }
            var s = defaultSub();
            util_1.extend(s, opts);
            s.subject = subject;
            s.callback = cb;
            resolve(_this.protocolHandler.subscribe(s));
        });
    };
    /**
     * Drains all subscriptions. Returns a Promise that when resolved, indicates that all subscriptions have finished,
     * and the client closed. Note that after calling drain, it is impossible to create new
     * subscriptions or make any requests. As soon as all messages for the draining subscriptions are processed,
     * it is also impossible to publish new messages.
     * A drained connection is closed when the Promise resolves.
     * @see [[Subscription.drain]]
     */
    Client.prototype.drain = function () {
        return this.protocolHandler.drain();
    };
    /**
     * Publish a request message with an implicit inbox listener as the reply. Message is optional.
     * This should be treated as a subscription. The subscription is auto-cancelled after the
     * first reply is received or the timeout in millisecond is reached.
     *
     * If a timeout is reached, the promise is rejected. Returns the received message if resolved.
     *
     * @param subject
     * @param timeout
     * @param data optional (can be a string, JSON object, or Buffer. Must match specified Payload option)
     * @return Promise<Msg>
     */
    Client.prototype.request = function (subject, timeout, data) {
        var _this = this;
        if (timeout === void 0) { timeout = 1000; }
        if (data === void 0) { data = undefined; }
        return new Promise(function (resolve, reject) {
            if (_this.isClosed()) {
                reject(error_1.NatsError.errorForCode(error_1.ErrorCode.CONN_CLOSED));
            }
            if (!subject) {
                reject(error_1.NatsError.errorForCode(error_1.ErrorCode.BAD_SUBJECT));
            }
            var r = defaultReq();
            var opts = { max: 1 };
            util_1.extend(r, opts);
            r.token = nuid_1.next();
            var request = _this.protocolHandler.request(r);
            r.timeout = setTimeout(function () {
                request.cancel();
                reject(error_1.NatsError.errorForCode(error_1.ErrorCode.REQ_TIMEOUT));
            }, timeout);
            r.callback = function (error, msg) {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(msg);
                }
            };
            try {
                _this.publish(subject, data, "" + _this.protocolHandler.muxSubscriptions.baseInbox + r.token);
            }
            catch (err) {
                reject(err);
                request.cancel();
            }
        });
    };
    ;
    /**
     * Closes the connection to the NATS server. A closed client cannot be reconnected.
     */
    Client.prototype.close = function () {
        this.protocolHandler.close();
    };
    /**
     * @return true if the NATS client is closed.
     */
    Client.prototype.isClosed = function () {
        return this.protocolHandler.isClosed();
    };
    /**
     * Report number of subscriptions on this connection.
     *
     * @return {Number}
     */
    Client.prototype.numSubscriptions = function () {
        return this.protocolHandler.numSubscriptions();
    };
    return Client;
}(events.EventEmitter));
exports.Client = Client;
/**
 * Creates a NATS [[Client]] by connecting to the specified server, port or using the specified [[NatsConnectionOptions]].
 * @param opts
 * @return Promise<Client>
 */
function connect(opts) {
    return Client.connect(opts);
}
exports.connect = connect;
/**
 * Type returned when a subscribe call resolved. Provides methods to manage the subscription.
 */
var Subscription = /** @class */ (function () {
    /**
     * @hidden
     */
    function Subscription(sub, protocol) {
        this.sid = sub.sid;
        this.protocol = protocol;
    }
    /**
     * @hidden
     */
    Subscription.cancelTimeout = function (s) {
        if (s && s.timeout) {
            clearTimeout(s.timeout);
            delete s.timeout;
        }
    };
    /**
     * Cancels the subscription after the specified number of messages has been received.
     * If max is not specified, the subscription cancels immediately. A cancelled subscription
     * will not process messages that are inbound but not yet handled.
     * @param max
     * @see [[drain]]
     */
    Subscription.prototype.unsubscribe = function (max) {
        this.protocol.unsubscribe(this.sid, max);
    };
    /**
     * Draining a subscription is similar to unsubscribe but inbound pending messages are
     * not discarded. When the last in-flight message is processed, the subscription handler
     * is removed.
     * @return a Promise that resolves when the draining a subscription completes
     * @see [[unsubscribe]]
     */
    Subscription.prototype.drain = function () {
        return this.protocol.drainSubscription(this.sid);
    };
    /**
     * Returns true if the subscription has an associated timeout.
     */
    Subscription.prototype.hasTimeout = function () {
        var sub = this.protocol.subscriptions.get(this.sid);
        return sub !== null && sub.hasOwnProperty('timeout');
    };
    /**
     * Cancels a timeout associated with the subscription
     */
    Subscription.prototype.cancelTimeout = function () {
        var sub = this.protocol.subscriptions.get(this.sid);
        Subscription.cancelTimeout(sub);
    };
    /**
     * Sets a timeout on a subscription. The timeout will fire by calling
     * the subscription's callback with an error argument if the expected
     * number of messages (specified via max) has not been received by the
     * subscription before the timer expires. If max is not specified,
     * the subscription times out if no messages are received within the timeout
     * specified.
     *
     * Returns `true` if the subscription was found and the timeout was registered.
     *
     * @param millis
     */
    Subscription.prototype.setTimeout = function (millis) {
        var _this = this;
        var sub = this.protocol.subscriptions.get(this.sid);
        Subscription.cancelTimeout(sub);
        if (sub) {
            sub.timeout = setTimeout(function () {
                if (sub && sub.callback) {
                    sub.callback(error_1.NatsError.errorForCode(error_1.ErrorCode.SUB_TIMEOUT), {});
                }
                _this.unsubscribe();
            }, millis);
            return true;
        }
        return false;
    };
    /**
     * Returns the number of messages received by the subscription.
     */
    Subscription.prototype.getReceived = function () {
        var sub = this.protocol.subscriptions.get(this.sid);
        if (sub) {
            return sub.received;
        }
        return 0;
    };
    /**
     * Returns the number of messages expected by the subscription.
     * If `0`, the subscription was not found or was auto-cancelled.
     * If `-1`, the subscription didn't specify a count for expected messages.
     */
    Subscription.prototype.getMax = function () {
        var sub = this.protocol.subscriptions.get(this.sid);
        if (!sub) {
            return 0;
        }
        if (sub && sub.max) {
            return sub.max;
        }
        return -1;
    };
    /**
     * @return true if the subscription is not found.
     */
    Subscription.prototype.isCancelled = function () {
        return this.protocol.subscriptions.get(this.sid) === null;
    };
    /**
     * @return true if the subscription is draining.
     * @see [[drain]]
     */
    Subscription.prototype.isDraining = function () {
        var sub = this.protocol.subscriptions.get(this.sid);
        if (sub) {
            return sub.draining === true;
        }
        return false;
    };
    return Subscription;
}());
exports.Subscription = Subscription;
//# sourceMappingURL=nats.js.map