"use strict";
/*
 * Copyright 2018 The NATS Authors
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var net = __importStar(require("net"));
var tls = __importStar(require("tls"));
var tls_1 = require("tls");
/**
 * @hidden
 */
var TCPTransport = /** @class */ (function () {
    function TCPTransport(handlers) {
        this.connectedOnce = false;
        this.stream = null;
        this.closed = false;
        this.handlers = handlers;
    }
    TCPTransport.prototype.connect = function (url) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            // Create the stream
            // See #45 if we have a stream release the listeners
            // otherwise in addition to the leak events will fire fire
            if (_this.stream) {
                _this.destroy();
            }
            var connected = false;
            // @ts-ignore typescript requires this parsed to a number
            _this.stream = net.createConnection(parseInt(url.port, 10), url.hostname, function () {
                resolve();
                connected = true;
                _this.connectedOnce = true;
                _this.handlers.connect();
            });
            _this.stream.setNoDelay(true);
            _this.stream.on('error', function (error) {
                if (!_this.connectedOnce) {
                    reject(error);
                    _this.destroy();
                }
                else {
                    // if the client didn't resolve, the error handler
                    // is not set, so emitting 'error' will shutdown node
                    _this.handlers.error(error);
                }
            });
            _this.stream.on('close', function () {
                if (_this.connectedOnce) {
                    _this.handlers.close();
                }
            });
            _this.stream.on('data', function (data) {
                // console.log('data', "< ", data.toString());
                _this.handlers.data(data);
            });
        });
    };
    TCPTransport.prototype.isClosed = function () {
        return this.closed;
    };
    TCPTransport.prototype.isConnected = function () {
        return this.stream != null && !this.stream.connecting;
    };
    TCPTransport.prototype.isEncrypted = function () {
        return this.stream instanceof tls_1.TLSSocket && this.stream.encrypted;
    };
    TCPTransport.prototype.isAuthorized = function () {
        return this.stream instanceof tls_1.TLSSocket && this.stream.authorized;
    };
    TCPTransport.prototype.upgrade = function (tlsOptions, done) {
        var _this = this;
        if (this.stream) {
            var opts = void 0;
            if ('object' === typeof tlsOptions) {
                opts = tlsOptions;
            }
            else {
                opts = {};
            }
            opts.socket = this.stream;
            this.stream.removeAllListeners();
            this.stream = tls.connect(opts, function () {
                done();
            });
            this.stream.on('error', function (error) {
                _this.handlers.error(error);
            });
            this.stream.on('close', function () {
                _this.handlers.close();
            });
            this.stream.on('data', function (data) {
                _this.handlers.data(data);
            });
        }
    };
    TCPTransport.prototype.write = function (data) {
        // if(typeof data === 'string') {
        //     console.log('>', [data]);
        // } else {
        //     console.log('>', [data.toString('binary')]);
        // }
        if (this.stream) {
            this.stream.write(data);
        }
    };
    TCPTransport.prototype.destroy = function () {
        if (!this.stream) {
            return;
        }
        if (this.closed) {
            this.stream.removeAllListeners();
        }
        this.stream.destroy();
        this.stream = null;
    };
    TCPTransport.prototype.close = function () {
        this.closed = true;
        this.destroy();
    };
    TCPTransport.prototype.pause = function () {
        if (this.stream) {
            this.stream.pause();
        }
    };
    TCPTransport.prototype.resume = function () {
        if (this.stream && this.stream.isPaused()) {
            this.stream.resume();
        }
    };
    return TCPTransport;
}());
exports.TCPTransport = TCPTransport;
//# sourceMappingURL=tcptransport.js.map