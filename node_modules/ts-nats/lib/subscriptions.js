"use strict";
/*
 * Copyright 2018 The NATS Authors
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("events");
/**
 * @hidden
 */
var Subscriptions = /** @class */ (function (_super) {
    __extends(Subscriptions, _super);
    function Subscriptions() {
        var _this = _super.call(this) || this;
        _this.subs = {};
        _this.sidCounter = 0;
        _this.length = 0;
        events_1.EventEmitter.call(_this);
        return _this;
    }
    Subscriptions.prototype.add = function (s) {
        this.sidCounter++;
        this.length++;
        s.sid = this.sidCounter;
        this.subs[s.sid] = s;
        var se = { sid: s.sid, subject: s.subject, queue: s.queue };
        this.emit('subscribe', se);
        return s;
    };
    Subscriptions.prototype.setMux = function (s) {
        this.mux = s;
        return s;
    };
    Subscriptions.prototype.getMux = function () {
        return this.mux;
    };
    Subscriptions.prototype.get = function (sid) {
        if (sid in this.subs) {
            return this.subs[sid];
        }
        return null;
    };
    Subscriptions.prototype.all = function () {
        var buf = [];
        for (var sid in this.subs) {
            var sub = this.subs[sid];
            buf.push(sub);
        }
        return buf;
    };
    Subscriptions.prototype.cancel = function (s) {
        if (s && s.timeout) {
            clearTimeout(s.timeout);
            delete s.timeout;
        }
        if (s.sid in this.subs) {
            var sub = this.subs[s.sid];
            var se = { sid: sub.sid, subject: sub.subject, queue: sub.queue };
            delete this.subs[s.sid];
            this.length--;
            this.emit('unsubscribe', se);
        }
    };
    Subscriptions.prototype.close = function () {
        var subs = this.all();
        for (var i = 0; i < subs.length; i++) {
            this.cancel(subs[i]);
        }
    };
    return Subscriptions;
}(events_1.EventEmitter));
exports.Subscriptions = Subscriptions;
//# sourceMappingURL=subscriptions.js.map